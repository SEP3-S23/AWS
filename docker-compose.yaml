version: '3.7'

services:
  appDB:
      container_name: appDB
      image: postgres:14-alpine
      restart: unless-stopped
      environment:
        POSTGRES_PASSWORD: postgres
        POSTGRES_USER: postgres
        POSTGRES_DB: app_server
        PGDATA: /var/lib/postgresql/data/pgdata
      volumes:
        - ./AppDB:/var/lib/postgresql/data
      ports:
        - '5431:5432'

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 15s
      retries: 1

  #ws1
  ws1_simulator:
    container_name: WS1_simulator
    build:
      context: ./Simulator
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
    environment:
      - EXCHANGE=ws1
    restart: on-failure

  #ws2
  ws2_simulator:
    container_name: WS2_simulator
    build:
      context: ./Simulator
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
    environment:
      - EXCHANGE=ws2
    restart: on-failure

  ws_server:
    container_name: WSServer
    build:
      context: ./WSServer
      dockerfile: Dockerfile
    ports:
      - 8100:8100
    environment:
      RABBITMQ_EXCHANGES: ws1,ws2 #add here all the ws you want to connect
      RABBITMQ_QUEUES: humidity,temperature,heat index,wind speed,wind direction,pressure,day,rain quantity
    restart: on-failure
    depends_on:
      - rabbitmq


volumes:
  postgres-data:
