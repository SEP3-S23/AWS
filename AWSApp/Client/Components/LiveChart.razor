

@using ChartOptions = MudBlazor.ChartOptions
@using System.Text
@using System.Net.Sockets
@using System.Net.WebSockets
@using System.Runtime.InteropServices.JavaScript
@using Blazorise.Charts
@using Blazorise.Charts.Streaming
@using global::Shared.Model
@using Newtonsoft.Json

@inject IJSRuntime JSRuntime

<LineChart @ref="horizontalLineChart" TItem="LiveDataPoint" OptionsObject="@horizontalLineChartOptions">
            <ChartStreaming TItem="LiveDataPoint"
                            Options="new ChartStreamingOptions { Delay = 1000 }"
                            Refreshed="@OnHorizontalLineRefreshed" />
        </LineChart>

@code {

    [Parameter] 
    public string selectedValue { get; set;}
    [Parameter]
    public bool changedSelection { get; set; }
    
    double temp { get; set; }
    WeatherDataDTO WeatherDataDto { get; set; }
    DateTime time { get; set; }
    
    LineChart<LiveDataPoint> horizontalLineChart;
    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ), ChartColor.FromRgba( 110, 99, 132, 0.2f), ChartColor.FromRgba( 255, 110, 255, 0.2f)  };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ), ChartColor.FromRgba( 110, 99, 132, 1f), ChartColor.FromRgba( 255, 110, 255, 1f)  };
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || changedSelection)
        {
            await Task.WhenAll(
                HandleRedraw( horizontalLineChart, GetLineChartDataset1 ) );
            await JSRuntime.InvokeVoidAsync("import", "/js/sse.js");

            changedSelection = false;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await SetupSseConnection();
    }
    

    private async Task SetupSseConnection()
    {
        await JSRuntime.InvokeVoidAsync("sse.setupSseConnection", DotNetObjectReference.Create(this), "http://localhost:8101/ws/ws1");
    }

    [JSInvokable]
    public void HandleSseMessage(string message)
    {
        WeatherDataDto = JsonConvert.DeserializeObject<WeatherDataDTO>(message);
        Console.WriteLine(message);
        if (WeatherDataDto.name == selectedValue)
        {
            temp = Convert.ToDouble(WeatherDataDto.value);
            time = WeatherDataDto.getDateFormat();
        }
    }
    
    [JSInvokable]
    public void HandleSseError()
    {
        
    }
    
    public struct LiveDataPoint
    {
        public object X { get; set; }

        public object Y { get; set; }
    }
    
    
    object horizontalLineChartOptions = new
    {
        Scales = new
        {
            Y = new
            {
                Title = new
                {
                    Display = true,
                    Text = "Value"
                }
            }
        },
        Interaction = new
        {
            intersect = false
        }
    };
    

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>( BaseChart<TDataSet, TItem, TOptions, TModel> chart, params Func<TDataSet>[] getDataSets )
 where TDataSet : ChartDataset<TItem>
 where TOptions : Blazorise.Charts.ChartOptions
 where TModel : ChartModel
    {
        await chart.Clear();

        await chart.AddLabelsDatasetsAndUpdate( Labels, getDataSets.Select( x => x.Invoke() ).ToArray() );
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1()
    {
        var index = Array.FindIndex(WeatherChoice.Choices, row => row.Contains(selectedValue));
        
        return new LineChartDataset<LiveDataPoint>
        {
            Data = new List<LiveDataPoint>(),
            Label = selectedValue,
            BackgroundColor = backgroundColors[index] ,
            BorderColor = borderColors[index],
            Fill = true,
            Tension = 0,
        };
    }
    
    Task OnHorizontalLineRefreshed( ChartStreamingData<LiveDataPoint> data )
    {
        data.Value = new LiveDataPoint
        {
            Y = temp,
            X = DateTime.Now
        };
        Console.WriteLine(time);
        return Task.CompletedTask;
    }
}