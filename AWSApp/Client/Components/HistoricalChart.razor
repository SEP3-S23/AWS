@using Blazorise.Charts
@using global::Shared.Model
@using global::Shared.DTOs
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json
@using BackEnd.Services.Authentication


<LineChart @ref="lineChart" TItem="double" />

@code{
    
    //TODO : CREATE A SERVICE TO RESTIVE HISTORICAL DATA and use the next code to create the data 
    
    [Parameter] 
    public string selectedSensor { get; set;}
    private string _selectedSensor { get; set; }
    [Parameter] 
    public string selectedWS { get; set;}
    
    [Parameter]
    public HystoricalWeatherDataDto? WeatherData { get; set; }
    private HystoricalWeatherDataDto _WeatherData { get; set; }

    public HistoricalDataService HistoricalDataService = new HistoricalDataService();
    
    
    LineChart<double> lineChart;
    
    
    protected override void OnInitialized()
    {
        _WeatherData = WeatherData;
        _selectedSensor = selectedSensor;
    }
    
    protected override async void OnParametersSet()
    {
        if (_selectedSensor!=selectedSensor)
        {
            _selectedSensor = selectedSensor;
            await HandleRedraw();
        }
        
        if (_WeatherData != WeatherData)
        {
            _WeatherData = WeatherData;
            if (WeatherData!=null)
            {
                await HandleRedraw();
            }
        }
    }
    
    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        
        if (firstRender)
        {
            await HandleRedraw();
        }
    }
    

    async Task HandleRedraw()
    {
        await lineChart.Clear();
        await lineChart.AddLabelsDatasetsAndUpdate( WeatherData.GetDates(), GetLineChartDataset() );
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        var index = Array.FindIndex(WeatherChoice.Choices, row => row.Contains(selectedSensor));
        return new LineChartDataset<double>
        {
            Label = selectedSensor,
            Data = WeatherData.GetValues(),
            BackgroundColor = backgroundColors[index],
            BorderColor = borderColors[index],
            Fill = true,
            PointRadius = 1,
            CubicInterpolationMode = "monotone",
        };
    }
    
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ), ChartColor.FromRgba( 110, 99, 132, 0.2f), ChartColor.FromRgba( 255, 110, 255, 0.2f)  };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ), ChartColor.FromRgba( 110, 99, 132, 1f), ChartColor.FromRgba( 255, 110, 255, 1f)  };

    
    
    
    
  

    
    
    
    
    
    
    
   

}