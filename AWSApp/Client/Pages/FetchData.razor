@page "/Dashboard"
@inject HttpClient Http
@using Client.Shared
@using ChartOptions = MudBlazor.ChartOptions
@using ChartType = MudBlazor.ChartType
@using System.Runtime.InteropServices.JavaScript
<PageTitle>Weather forecast</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudGrid Spacing="5" Justify="Justify.Center" Class="ma-5">
        <MudItem Class="mud-elevation-1 rounded" xs="8">

            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" ChartOptions="chartOptions"></MudChart>

        </MudItem>
        <MudItem xs="4">
            <MudGrid>
                <MudItem xs="12" lg="6" >
                    <MudCard>
                        <MudCardContent Class="d-flex justify-center">
                            <MudText Typo="Typo.h3" Color="Color.Info">13°C</MudText>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-space-around">
                            <MudIconButton Icon="@Icons.Material.Filled.Share" aria-label="share"/>
                            <MudIconButton Icon="@Icons.Material.Filled.Info" aria-label="share"/>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" lg="6">
                    <MudCard>
                        <MudCardContent Class="d-flex justify-center">
                            <MudIcon Icon="@Icons.Material.Filled.Cloud" Size="Size.Large"/>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-space-around">
                            <MudIconButton Icon="@Icons.Material.Filled.Share" aria-label="share"/>
                            <MudIconButton Icon="@Icons.Material.Filled.Info" aria-label="share"/>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>

        </MudItem>
        <MudItem Class="ma-5">
            <MudTable Items="forecasts" Hover="true" SortLabel="Sort By" Elevation="0">
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WeatherForecast, object>(x => x.Date)">Date</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x => x.TemperatureC)">Temp. (C)</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x => x.Weather)">Temp. (F)</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x => x.Summary!)">Summary</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Date">@context.Date</MudTd>
                    <MudTd DataLabel="Temp. (C)">@context.TemperatureC</MudTd>
                    <MudTd DataLabel="Weather">@context.Weather</MudTd>
                    <MudTd DataLabel="Summary">@context.Summary</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 50, 100 }"/>
                </PagerContent>
            </MudTable>
        </MudItem>
</MudGrid>


@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int Weather => 32 + (int)(TemperatureC / 0.5556);
    }

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public ChartOptions chartOptions = new ChartOptions();
    
    public string[] XAxisLabels {get; set; }
    public static double[] Data { get; set;}

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries()
        {
            Name = "Temperature", Data = Data
        }
    };
    
}