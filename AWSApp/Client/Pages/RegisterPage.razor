@page "/RegisterPage"
@using System.ComponentModel.DataAnnotations

@using MudBlazor

<style>
    
     .custom-background {
           background-color: #F0F0F0;
       }
       .PageTitle {
           
           font-weight: bold;
       }
</style>


<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    
    @* full name, email, birthday date, username,password  *@
    <MudItem xs="12" sm="12" md="12">
        <MudCard class="custom-background">

            <MudCardContent>
                <MudText Typo="Typo.h4" class="PageTitle">Register</MudText>
                <MudTextField Label="Full Name" HelperText="Max. 8 characters"
                              @bind-Value="model.FullName" For="@(() => model.FullName)"/>
                <MudTextField Label="Email" HelperText="Max. 8 characters"
                              @bind-Value="model.Email" For="@(() => model.Email)"/>
<MudDatePicker Label="Birthdate" @bind-Date="model.Birthdate" For="@(() => model.Birthdate)"/>
                <MudTextField Label="Username" HelperText="Max. 8 characters"
                              @bind-Value="model.Username" For="@(() => model.Username)"/>
                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                              @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                              @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions Class="d-flex align-center flex-grow-1 gap-4">
                <MudButton Class="d-flex flex-1" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary">Register</MudButton>
                <MudButton Class="d-flex flex-1" ButtonType="ButtonType.Button" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.AppRegistration" Color="Color.Secondary" Href="LoginPage">Login</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>

    <MudBreakpoint Breakpoint="Breakpoint.Sm"/>

    <MudItem xs="12" sm="12" md="12">
        <MudPaper Class="pa-4 mud-height-full custom-background ">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary/>
                </MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
</EditForm>


@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        public string FullName { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DateNow]
        public DateTime? Birthdate { get; set; }

        [Required]
        [StringLength(32, ErrorMessage = "Name length can't be more than 32.")]
        public string Username { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }


    public class DateNow : ValidationAttribute
    {
        public string GetErrorMessage() => "Aren't you born yet?";

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var date = (DateTime)value;

            if (DateTime.Compare(date, DateTime.Now) > 0) return new ValidationResult(GetErrorMessage());
            else return ValidationResult.Success;
        }
    }


    private void OnValidSubmit(EditContext context)
    {
        success = true;

    }

}