@page "/"
@inject HttpClient Http
@using Client.Shared
@using Client.Components
@using BackEnd.Services.Data
@using global::Shared.DTOs
@using global::Shared.Model
@using Newtonsoft.Json
@using System.ComponentModel.DataAnnotations
@using BackEnd.Services.Authentication

@inject IDialogService DialogService
@inject IJSRuntime JSRuntime


<PageTitle>DashBoard</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Weather Station</MudText>
        <MudSelect ValueChanged="value => ChangedWS(value)" MultiSelection="false" @bind-SelectedValues="optionsWS" T="string" Label="Select WS to view" AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter">
            @foreach (var choich in WSList)
            {
                <MudSelectItem T="string" Value="@choich">@choich</MudSelectItem>
            }
        </MudSelect>
<MudGrid Spacing="10" Class="ma-2" Justify="Justify.SpaceEvenly">
    <MudItem xs="2" lg="2" Style="min-width: 20vh; min-height: 20vh">
        <MudPaper >
            <MudCardContent Class=" justify-center">
                <div style="position: relative;
                              text-align: center;
                              color: white;">
                    <p style="position: absolute;
                                                                                top: 100%;
                                                                                left: 50%;
                                                                                transform: translate(-50%, -50%);
                                                                                color: tomato;
                                                                                font-size: 1.5vh;
                                                                                font-weight: bold">
                        @Temperature °C
                    </p>
                    <TemperatureIcon/>
                </div>

            </MudCardContent>
            <MudCardActions Class="d-flex justify-space-around">
                <MudIconButton Icon="@Icons.Material.Filled.Share" aria-label="share"/>
                <MudIconButton Icon="@Icons.Material.Filled.Info" aria-label="share"/>
            </MudCardActions>
        </MudPaper >
    </MudItem>
    <MudItem xs="2" lg="2"Style="min-width: 20vh; min-height: 20vh">
        <MudCard >
            <MudCardContent Class=" justify-center">
                <WeatherIcon Weather="@WeatherCondition"/>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-space-around">
                <MudIconButton Icon="@Icons.Material.Filled.Share" aria-label="share"/>
                <MudIconButton Icon="@Icons.Material.Filled.Info" aria-label="share"/>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="2" lg="2" Style="min-width: 20vh; min-height: 20vh">
        <MudCard >
            <MudCardContent Class="justify-center">
                <UvIndexIcon HeatIndex="@HeatIndex"/>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-space-around">
                <MudIconButton Icon="@Icons.Material.Filled.Share" aria-label="share"/>
                <MudIconButton Icon="@Icons.Material.Filled.Info" aria-label="share"/>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="2" lg="2" Style="min-width: 20vh; min-height: 20vh">
        <MudCard >
            <MudCardContent Class=" justify-center">
                <WindIcon WindSpeed="WindSpeed"/>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-space-around">
                <MudIconButton Icon="@Icons.Material.Filled.Share" aria-label="share"/>
                <MudIconButton Icon="@Icons.Material.Filled.Info" aria-label="share"/>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="2" lg="2" Style="min-width: 20vh; min-height: 20vh">
        <MudCard >
            <MudCardContent Class="justify-center">
                <div style="position: relative;
                                                              text-align: center;
                                                              color: white;">
                    <p style="position: absolute;
                                                                top: 100%;
                                                                left: 50%;
                                                                transform: translate(-50%, -50%);
                                                                color: dodgerblue;
                                                                font-size: 1.5vh;
                                                                font-weight: bold">
                        @Humidity %
                    </p>
                    <HumidityMeasureIcon/>
                </div>

            </MudCardContent>
            <MudCardActions Class="d-flex justify-space-around">
                <MudIconButton Icon="@Icons.Material.Filled.Share" aria-label="share"/>
                <MudIconButton Icon="@Icons.Material.Filled.Info" aria-label="share"/>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="2" lg="2" Style="min-width: 20vh; min-height: 20vh">
        <MudCard >
            <MudCardContent Class="justify-center">
                <div style="position: relative;
                                              text-align: center;
                                              color: white;">
                    <p style="position: absolute;
                                                top: 100%;
                                                left: 50%;
                                                transform: translate(-50%, -50%);
                                                color: dodgerblue;
                                                font-size: 1.5vh;
                                                font-weight: bold">
                        @Rain ml
                    </p>
                    <RainDropMeasureIcon/>
                </div>

            </MudCardContent>
            <MudCardActions Class="d-flex justify-space-around">
                <MudIconButton Icon="@Icons.Material.Filled.Share" aria-label="share"/>
                <MudIconButton Icon="@Icons.Material.Filled.Info" aria-label="share"/>

            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem Class="mud-elevation-1 rounded" xs="12">
        @if (!LiveDataIsSelected)
        {
            <HistoricalChart SelectedSensor="@SelectedSensor" WeatherData="@HistoricalWeatherData"/>
            <MudButton OnClick="@(() => LiveDataIsSelected = true)" Variant="Variant.Filled" Color="Color.Secondary">
                View Live Data
            </MudButton>
            <MudButton OnClick="GenerateHistoricalData" Variant="Variant.Filled" Color="Color.Secondary">
                Confirm Data
            </MudButton>
            <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Secondary">
                Edit Filter
            </MudButton>
            <MudText Color="@Color.Error">
                @ValidationMessage
            </MudText>
        }
        @if (LiveDataIsSelected)
        {
            <LiveChart SelectedValue="@SelectedSensor" WeatherDataDto="@WeatherData"/>
            <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
                View historical Data
            </MudButton>
        }
        <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3"/> Select Day range
                </MudText>
            </TitleContent>
            <DialogContent>

                <MudGrid>
                    <MudItem xs="12" sm="12" md="12">
                        <MudDateRangePicker Label="Select date range" @bind-DateRange="_dateRange"/>
                    </MudItem>

                </MudGrid>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="px-10">Close</MudButton>
            </DialogActions>
        </MudDialog>
        <MudSelect ValueChanged="value => Changed(value)" MultiSelection="false" @bind-SelectedValues="options" T="string" Label="Select Data to view" AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter">
            @foreach (var choich in WeatherChoice.Choices)
            {
                <MudSelectItem T="string" Value="@choich">@choich</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>

@code {
    
    private string SelectedSensor { get; set; } = WeatherChoice.Temperature;
    private string SelectedWS { get; set; }
    private IEnumerable<string> options { get; set; }
    private IEnumerable<string> optionsWS { get; set; }
    private bool LiveDataIsSelected { get; set; } = true;
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private bool _autoClose;
    private string ValidationMessage { get; set; }
    HystoricalWeatherDataDto HistoricalWeatherData;
    private DialogOptions dialogOptions = new() { FullWidth = true };
    private bool visible;
    private int rating;
    private void OpenDialog() => visible = true;
    private WeatherDataDTO? WeatherData { get; set; }
    private WeatherDataDTO SelectedWeatherData { get; set; }
    private double Temperature { get; set; } = 0.0;
    private double Humidity { get; set; } = 0.0;
    private double Rain { get; set; } = 0.0;
    private double WindSpeed { get; set; } = 0.0;
    private double HeatIndex { get; set; } = 0;
    private string WeatherCondition { get; set; } = "partly-cloudy-day-hail";
    private String[] WSList { get; set; } = {};
    private HistoricalDataService HistoricalDataService = new HistoricalDataService();
    private bool swchanged { get; set; }
    

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender )
        {
            await JSRuntime.InvokeVoidAsync("import", "/js/sse.js");
            WSList = await HistoricalDataService.GetWSList();
            swchanged = false;
            SetupSseConnection(WSList[0]);
        }
    }


    private async Task SetupSseConnection(string wsName)
    {
        await JSRuntime.InvokeVoidAsync("sse.setupSseConnection", DotNetObjectReference.Create(this), "http://localhost:8101/ws/"+wsName);
    }
    
    
    [JSInvokable]
    public void HandleSseMessage(string message)
    {
        
        WeatherData = JsonConvert.DeserializeObject<WeatherDataDTO>(message);
        if (WeatherData.name == WeatherChoice.Temperature)
        {
            Temperature = WeatherData.GetValueByName(WeatherChoice.Temperature);
        }
        if (WeatherData.name == WeatherChoice.Humidity)
        {
            Humidity = WeatherData.GetValueByName(WeatherChoice.Humidity);
        }
        if (WeatherData.name == WeatherChoice.RainQuantity)
        {
            Rain = WeatherData.GetValueByName(WeatherChoice.RainQuantity);
        }
        if (WeatherData.name == WeatherChoice.WindSpeed)
        {
            WindSpeed = WeatherData.GetValueByName(WeatherChoice.WindSpeed);
        }
        if (WeatherData.name == WeatherChoice.UVIndex)
        {
            HeatIndex =WeatherData.GetValueByName(WeatherChoice.UVIndex);
        }
        if (WeatherData.name == "weather condition")
        {
            WeatherCondition = WeatherData.value;
        }
        StateHasChanged();
    }
    
    [JSInvokable]
    public void HandleSseError()
    {
       
    }
    
    
    void Submit()
    {
        visible = false;
        LiveDataIsSelected = false;
    }
    
    
    private async void GenerateHistoricalData()
    {
        ValidationMessage = "";
        if (_dateRange.Start > DateTime.Now)
        {
            ValidationMessage = "Select a Valid date Range";
            return;
        }
        if (SelectedWS==null)
        {
            ValidationMessage = "Select a Valid Station";
        }
        if (SelectedSensor==null)
        {
            ValidationMessage = "Select a Valid Sensor";
        }

        await GetHistoricalData();
    }

    private async Task GetHistoricalData()
    {
        try
        {
            long startDate = ((DateTimeOffset)_dateRange.Start).ToUnixTimeSeconds();
            long endDate = ((DateTimeOffset)_dateRange.End).ToUnixTimeSeconds();
            HistoricalWeatherData = await HistoricalDataService.GetData(SelectedWS, SelectedSensor,startDate,endDate );
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    
    
    
    
    
    void Changed(string value)
    {
        this.SelectedSensor = value;
        GenerateHistoricalData();
    }
    
    void ChangedWS(string value)
    {
        this.SelectedWS = value;
        SetupSseConnection(this.SelectedWS);
        swchanged = true;
        StateHasChanged();
    }
    
    static string json = @"{
    ""name"": ""temperature"",
    ""wsName"": ""ws1"",
    ""data"": [
        {
            ""value"": 19.400000000000002,
            ""date"": 1685123670
        },
        {
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },{
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },{
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },{
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },{
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },{
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },{
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },{
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },{
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },{
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },{
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },{
            ""value"": 17.200000000000014,
            ""date"": 1685123778
        },
    ],
    ""unit"": ""°C""
}";



}