@page "/LoginPage"
@using System.ComponentModel.DataAnnotations
@using BackEnd.Services.Authentication

@using MudBlazor

<style>
    
     .custom-background {
           background-color: #F0F0F0;
       }
       .PageTitle {
           
           font-weight: bold;
       }
</style>


<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    
    <MudItem xs="12" sm="12" md="12" >
        <MudCard class="custom-background">
            <MudCardContent>
                <MudText Typo="Typo.h4" class="PageTitle">Login</MudText>
                <MudTextField Label="Username" HelperText="Max. 8 characters"
                              @bind-Value="model.Username" For="@(() => model.Username)"/>
                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                              @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                              @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions Class="d-flex align-center flex-grow-1 gap-4" >
                <MudButton Class="d-flex flex-1" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary">Login</MudButton>
                <MudButton Class="d-flex flex-1" ButtonType="ButtonType.Button" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.AppRegistration" Color="Color.Secondary" Href="RegisterPage">Register</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    
    <MudBreakpoint Breakpoint="Breakpoint.Sm" />
    
    <MudItem  xs="12" sm="12" md="12">
        <MudPaper Class="pa-4 mud-height-full custom-background" >
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary/>
                    <p>@Error</p>
                </MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
</EditForm>


@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;
    string Error= "vuoto";

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(32, ErrorMessage = "Name length can't be more than 32.")]
        public string Username { get; set; }
        

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }
    
    
    private void OnValidSubmit(EditContext context)
    {
        try
        {
            Submit(model.Username, model.Password);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
    }


    private async Task Submit(string email, string password)
    {
        IAuthService authService = new AuthService("http://localhost:8090/api/user");
        try
        {
            var result = await authService.LoginAsync(email, password);
            Console.WriteLine(result.ToString());
            success = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Console.WriteLine(e.Message, "MESSAGGIO");
            Error = e.Message;
            
            throw;
        }
        
    }

}