Index: ../AwsServer/src/main/java/com/awsServer/security/services/ForumService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.services;public class ForumService {\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/services/ForumService.java b/../AwsServer/src/main/java/com/awsServer/security/services/ForumService.java
--- a/../AwsServer/src/main/java/com/awsServer/security/services/ForumService.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/services/ForumService.java	
@@ -1,2 +1,57 @@
-package com.awsServer.security.services;public class ForumService {
+package com.awsServer.security.services;
+
+import com.awsServer.security.forum.Forum;
+import com.awsServer.security.forum.ForumRepository;
+import com.awsServer.security.forum.ForumRequest;
+import com.awsServer.security.user.User;
+import com.awsServer.security.user.UserRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.Date;
+import java.util.Optional;
+
+@Service
+@RequiredArgsConstructor
+public class ForumService {
+
+    private final ForumRepository forumRepository;
+    private UserRepository userRepository;
+
+    @Autowired
+    public ForumService(ForumRepository forumRepository1, UserRepository userRepository1)
+    {
+        this.forumRepository = forumRepository1;
+        this.userRepository = userRepository1;
+    }
+
+    public Forum createForum(String username, ForumRequest request)
+    {
+        Optional<User> user = userRepository.findByUserName(username);
+
+        if(forumNameAlreadyExists(request.getName()))
+        {
+            return null;
+        }
+
+        Forum forum = new Forum();
+        forum.setUser(user.orElseThrow());
+        forum.setCategory(request.getCategory());
+        forum.setName(request.getName());
+        forum.setDescription(request.getDescription());
+
+        Date creationDate = new Date();
+
+        forum.setCreationDate(creationDate);
+
+        return forumRepository.save(forum);
+    }
+
+    private boolean forumNameAlreadyExists(String name)
+    {
+        return forumRepository.findForumByName(name).isPresent();
+    }
+
+
 }
Index: ../AwsServer/src/main/java/com/awsServer/security/services/AuthenticationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.services;\r\n\r\nimport com.awsServer.security.auth.AuthenticationRequest;\r\nimport com.awsServer.security.auth.AuthenticationResponse;\r\nimport com.awsServer.security.auth.RegisterRequest;\r\nimport com.awsServer.security.config.JwtService;\r\nimport com.awsServer.security.user.Role;\r\nimport com.awsServer.security.user.User;\r\nimport com.awsServer.security.user.UserRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class AuthenticationService {\r\n\r\n    private final UserRepository repository;\r\n    private final PasswordEncoder passwordEncoder;\r\n    private final JwtService jwtService;\r\n    private final AuthenticationManager authenticationManager;\r\n\r\n    public AuthenticationResponse register(RegisterRequest request) {\r\n        var user = User.builder()\r\n                .fullName(request.getFullName())\r\n                .birthDate(request.getBirthDate())\r\n                .email(request.getEmail())\r\n                .userName(request.getUserName())\r\n                .role(Role.USER)\r\n                .password(passwordEncoder.encode(request.getPassword())).build();\r\n\r\n        repository.save(user);\r\n        var jwtToken = jwtService.generateToken(user);\r\n        return AuthenticationResponse.builder()\r\n                .token(jwtToken)\r\n                .build();\r\n\r\n    }\r\n\r\n\r\n    public AuthenticationResponse authenticate(AuthenticationRequest request) {\r\n        authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(request.getUserName(), request.getPassword()));\r\n        var user = repository.findByUserName(request.getUserName()).orElseThrow();\r\n        var jwtToken = jwtService.generateToken(user);\r\n        return AuthenticationResponse.builder().token(jwtToken).build();\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/services/AuthenticationService.java b/../AwsServer/src/main/java/com/awsServer/security/services/AuthenticationService.java
--- a/../AwsServer/src/main/java/com/awsServer/security/services/AuthenticationService.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/services/AuthenticationService.java	
@@ -3,7 +3,6 @@
 import com.awsServer.security.auth.AuthenticationRequest;
 import com.awsServer.security.auth.AuthenticationResponse;
 import com.awsServer.security.auth.RegisterRequest;
-import com.awsServer.security.config.JwtService;
 import com.awsServer.security.user.Role;
 import com.awsServer.security.user.User;
 import com.awsServer.security.user.UserRepository;
@@ -33,6 +32,8 @@
 
         repository.save(user);
         var jwtToken = jwtService.generateToken(user);
+        System.out.println("Extracted username: ");
+        System.out.println(jwtService.extractUsername(jwtToken));
         return AuthenticationResponse.builder()
                 .token(jwtToken)
                 .build();
Index: ../AwsServer/src/main/java/com/awsServer/security/services/PostService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.services;public class PostService {\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/services/PostService.java b/../AwsServer/src/main/java/com/awsServer/security/services/PostService.java
--- a/../AwsServer/src/main/java/com/awsServer/security/services/PostService.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/services/PostService.java	
@@ -1,2 +1,54 @@
-package com.awsServer.security.services;public class PostService {
+package com.awsServer.security.services;
+
+import com.awsServer.security.forum.Forum;
+import com.awsServer.security.forum.ForumRepository;
+import com.awsServer.security.post.Post;
+import com.awsServer.security.post.PostRepository;
+import com.awsServer.security.post.PostRequest;
+import com.awsServer.security.user.User;
+import com.awsServer.security.user.UserRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.Date;
+import java.util.List;
+import java.util.Optional;
+
+@Service
+@RequiredArgsConstructor
+public class PostService {
+
+    private final PostRepository postRepository;
+    private  UserRepository userRepository;
+    private ForumRepository forumRepository;
+
+    @Autowired
+    public PostService(PostRepository postRepository, UserRepository userRepository, ForumRepository forumRepository)
+    {
+        this.forumRepository = forumRepository;
+        this.postRepository = postRepository;
+        this.userRepository = userRepository;
+    }
+
+    public Post createPost(String username, PostRequest postRequest)
+    {
+        Optional<User> user = userRepository.findByUserName(username);
+        Optional<Forum> forum = forumRepository.findForumByName(postRequest.getForumName());
+
+        Post post = new Post();
+        post.setTitle(postRequest.getTitle());
+        post.setBody(postRequest.getBody());
+        post.setUser(user.orElseThrow());
+
+        post.setForum(forum.orElseThrow());
+
+        Date creationDate = new Date();
+        post.setDate(creationDate);
+
+
+        return postRepository.save(post);
+
+    }
+
 }
Index: ../AwsServer/src/main/java/com/awsServer/security/services/JwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.config;\r\n\r\nimport io.jsonwebtoken.Claims;\r\nimport io.jsonwebtoken.Jwts;\r\nimport io.jsonwebtoken.SignatureAlgorithm;\r\nimport io.jsonwebtoken.io.Decoders;\r\nimport io.jsonwebtoken.security.Keys;\r\nimport lombok.Data;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.security.Key;\r\nimport java.util.*;\r\nimport java.util.function.Function;\r\n\r\n@Service\r\npublic class JwtService {\r\n\r\n    private static final String SECRET_KEY = \"5267556B58703273357638792F423F4528472B4B6250655368566D597133743677397A24432646294A404D635166546A576E5A7234753778214125442A472D4B\";\r\n\r\n    public String extractUsername(String token) {\r\n        return extractClaim(token, Claims::getSubject);\r\n    }\r\n\r\n    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver){\r\n        final Claims claims = extractAllClaims(token);\r\n        return claimsResolver.apply(claims);\r\n    }\r\n\r\n    public String extractTokenFromAuthorizationHeader(String authorizationHeader) {\r\n        if (authorizationHeader != null && authorizationHeader.startsWith(\"Bearer \")) {\r\n            return authorizationHeader.substring(7); // Extract token after \"Bearer \"\r\n        }\r\n        return null; // No token found or invalid authorization header\r\n    }\r\n\r\n    public String generateToken(UserDetails userDetails){\r\n        return generateToken(new HashMap<>(), userDetails);\r\n    }\r\n\r\npublic String generateToken(\r\n        Map<String, Objects> extraClaims,\r\n        UserDetails userDetails\r\n){\r\n        return Jwts\r\n                .builder()\r\n                .setClaims(extraClaims)\r\n                .setSubject(userDetails.getUsername())\r\n                .setIssuedAt(new Date(System.currentTimeMillis()))\r\n                .setExpiration(new Date(System.currentTimeMillis()+1000*60*24))\r\n                .signWith(getSignInKey(), SignatureAlgorithm.HS256)\r\n                .compact();\r\n}\r\n\r\npublic boolean isTokenValid(String token, UserDetails userDetails){\r\n        final String username= extractUsername(token);\r\n        return (username.equals(userDetails.getUsername())) && !isTokenExpired(token);\r\n}\r\n\r\n    private boolean isTokenExpired(String token) {\r\n\r\n        return extractExpiration(token).before(new Date());\r\n    }\r\n\r\n    private Date extractExpiration(String token) {\r\n        return  extractClaim(token, Claims::getExpiration);\r\n    }\r\n\r\n    private Claims extractAllClaims(String token) {\r\n        return Jwts\r\n                .parserBuilder()\r\n                .setSigningKey(getSignInKey())\r\n                .build()\r\n                .parseClaimsJws(token)\r\n                .getBody();\r\n    }\r\n\r\n    private Key getSignInKey() {\r\n        byte[] keyBytes= Decoders.BASE64.decode(SECRET_KEY);\r\n        return Keys.hmacShaKeyFor(keyBytes);\r\n    }\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/services/JwtService.java b/../AwsServer/src/main/java/com/awsServer/security/services/JwtService.java
--- a/../AwsServer/src/main/java/com/awsServer/security/services/JwtService.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/services/JwtService.java	
@@ -1,4 +1,4 @@
-package com.awsServer.security.config;
+package com.awsServer.security.services;
 
 import io.jsonwebtoken.Claims;
 import io.jsonwebtoken.Jwts;
@@ -47,7 +47,7 @@
                 .setClaims(extraClaims)
                 .setSubject(userDetails.getUsername())
                 .setIssuedAt(new Date(System.currentTimeMillis()))
-                .setExpiration(new Date(System.currentTimeMillis()+1000*60*24))
+                .setExpiration(new Date(System.currentTimeMillis()+1000*60*60*24))
                 .signWith(getSignInKey(), SignatureAlgorithm.HS256)
                 .compact();
 }
Index: ../AwsServer/src/main/java/com/awsServer/security/post/PostRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.post;public interface PostRepository {\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/post/PostRepository.java b/../AwsServer/src/main/java/com/awsServer/security/post/PostRepository.java
--- a/../AwsServer/src/main/java/com/awsServer/security/post/PostRepository.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/post/PostRepository.java	
@@ -1,2 +1,8 @@
-package com.awsServer.security.post;public interface PostRepository {
+package com.awsServer.security.post;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface PostRepository extends JpaRepository<Post, Integer> {
 }
Index: ../AwsServer/src/main/java/com/awsServer/security/post/PostController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.post;public class PostController {\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/post/PostController.java b/../AwsServer/src/main/java/com/awsServer/security/post/PostController.java
--- a/../AwsServer/src/main/java/com/awsServer/security/post/PostController.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/post/PostController.java	
@@ -1,2 +1,40 @@
-package com.awsServer.security.post;public class PostController {
+package com.awsServer.security.post;
+
+import com.awsServer.security.services.JwtService;
+import com.awsServer.security.services.PostService;
+import jakarta.servlet.http.HttpServletRequest;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequiredArgsConstructor
+@RequestMapping("api/v1/posts")
+public class PostController {
+    private final PostService postService;
+    private final JwtService jwtService;
+    private final UserDetailsService userDetailsService;
+
+    @PostMapping("/create")
+    public ResponseEntity<String> createPost(HttpServletRequest request, @RequestBody PostRequest postRequest)
+    {
+        String authorizationHeader = request.getHeader("Authorization");
+        String token = jwtService.extractTokenFromAuthorizationHeader(authorizationHeader);
+        String username = jwtService.extractUsername(token);
+
+       boolean isValidToken = jwtService.isTokenValid(token,userDetailsService.loadUserByUsername(username));
+       if(!isValidToken)
+       {
+           return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid token");
+       }
+       else {
+           postService.createPost(username, postRequest);
+           return ResponseEntity.ok("Post created successfully");
+       }
+    }
 }
Index: ../AwsServer/src/main/java/com/awsServer/security/post/PostRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.post;public class PostRequest {\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/post/PostRequest.java b/../AwsServer/src/main/java/com/awsServer/security/post/PostRequest.java
--- a/../AwsServer/src/main/java/com/awsServer/security/post/PostRequest.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/post/PostRequest.java	
@@ -1,2 +1,17 @@
-package com.awsServer.security.post;public class PostRequest {
+package com.awsServer.security.post;
+
+import com.awsServer.security.forum.Forum;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class PostRequest {
+    private String forumName;
+    private String title;
+    private String body;
 }
Index: ../AwsServer/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring:\r\n    datasource:\r\n      url: jdbc:postgresql://localhost:5431/jwt_security\r\n      username: postgres\r\n      password : postgres\r\n      driver-class-name: org.postgresql.Driver\r\n    jpa:\r\n      hibernate:\r\n        ddl-auto: create-drop\r\n#        ddl-auto: update TODO use this after test\r\n      show-sql: true\r\n      properties:\r\n        hibernate:\r\n          format_sql: true\r\n      database: postgresql\r\n      database-platform: org.hibernate.dialect.PostgreSQLDialect\r\n    application:\r\n      security:\r\n        jwt:\r\n          secret-key: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970\r\n          expiration: 86400000 # a day\r\n          refresh-token:\r\n            expiration: 604800000 # 7 days
===================================================================
diff --git a/../AwsServer/src/main/resources/application.yml b/../AwsServer/src/main/resources/application.yml
--- a/../AwsServer/src/main/resources/application.yml	
+++ b/../AwsServer/src/main/resources/application.yml	
@@ -1,8 +1,8 @@
 spring:
     datasource:
-      url: jdbc:postgresql://localhost:5431/jwt_security
+      url: jdbc:postgresql://localhost:5432/aws_test
       username: postgres
-      password : postgres
+      password : Santiago32411
       driver-class-name: org.postgresql.Driver
     jpa:
       hibernate:
Index: ../AwsServer/src/main/java/com/awsServer/security/user/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.user;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\n\r\nimport java.util.Collection;\r\nimport java.util.List;\r\n\r\n@Data\r\n@Builder\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Entity\r\n@Table(name = \"_user\")\r\npublic class User implements UserDetails {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)  //default value is AUTO\r\n    private Integer id;\r\n    private String fullName;\r\n    private String email;\r\n    private String userName;\r\n    private String password;\r\n    private String birthDate;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private Role role;\r\n\r\n    @Override\r\n    public Collection<? extends GrantedAuthority> getAuthorities() {\r\n        return List.of(new SimpleGrantedAuthority(role.name()));\r\n    }\r\n\r\n    @Override\r\n    public String getUsername() {\r\n        return userName;\r\n    }\r\n\r\n    @Override\r\n    public boolean isAccountNonExpired() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isAccountNonLocked() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isCredentialsNonExpired() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isEnabled() {\r\n        return true;\r\n    }\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/user/User.java b/../AwsServer/src/main/java/com/awsServer/security/user/User.java
--- a/../AwsServer/src/main/java/com/awsServer/security/user/User.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/user/User.java	
@@ -1,5 +1,6 @@
 package com.awsServer.security.user;
 
+import com.awsServer.security.post.Post;
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
@@ -27,6 +28,10 @@
     private String userName;
     private String password;
     private String birthDate;
+    private boolean isBanned = false;
+
+    @OneToMany(mappedBy = "user")
+    private List<Post> posts;
 
     @Enumerated(EnumType.STRING)
     private Role role;
Index: ../AwsServer/src/main/java/com/awsServer/security/user/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.user;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.util.Optional;\r\n\r\npublic interface UserRepository extends JpaRepository<User, Integer> {\r\n\r\n    Optional<User> findByUserName(String username);\r\n\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/user/UserRepository.java b/../AwsServer/src/main/java/com/awsServer/security/user/UserRepository.java
--- a/../AwsServer/src/main/java/com/awsServer/security/user/UserRepository.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/user/UserRepository.java	
@@ -1,9 +1,11 @@
 package com.awsServer.security.user;
 
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
 
 import java.util.Optional;
 
+@Repository
 public interface UserRepository extends JpaRepository<User, Integer> {
 
     Optional<User> findByUserName(String username);
Index: ../AwsServer/src/main/java/com/awsServer/security/forum/ForumRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.forum;public interface ForumRepository {\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/forum/ForumRepository.java b/../AwsServer/src/main/java/com/awsServer/security/forum/ForumRepository.java
--- a/../AwsServer/src/main/java/com/awsServer/security/forum/ForumRepository.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/forum/ForumRepository.java	
@@ -1,2 +1,9 @@
-package com.awsServer.security.forum;public interface ForumRepository {
+package com.awsServer.security.forum;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.Optional;
+
+public interface ForumRepository extends JpaRepository<Forum, Integer> {
+    Optional<Forum> findForumByName(String name);
 }
Index: ../AwsServer/src/main/java/com/awsServer/security/forum/ForumController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.forum;public class ForumController {\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/forum/ForumController.java b/../AwsServer/src/main/java/com/awsServer/security/forum/ForumController.java
--- a/../AwsServer/src/main/java/com/awsServer/security/forum/ForumController.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/forum/ForumController.java	
@@ -1,2 +1,41 @@
-package com.awsServer.security.forum;public class ForumController {
+package com.awsServer.security.forum;
+
+import com.awsServer.security.services.ForumService;
+import com.awsServer.security.services.JwtService;
+import jakarta.servlet.http.HttpServletRequest;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequiredArgsConstructor
+@RequestMapping("api/v1/forums")
+public class ForumController {
+    private final JwtService jwtService;
+    private final UserDetailsService userDetailsService;
+    private final ForumService forumService;
+
+    @PostMapping("/create")
+    public ResponseEntity<String> createForum(HttpServletRequest request, @RequestBody ForumRequest forumRequest)
+    {
+        String authorizationHeader = request.getHeader("Authorization");
+        String token = jwtService.extractTokenFromAuthorizationHeader(authorizationHeader);
+        String username = jwtService.extractUsername(token);
+
+        boolean isValidToken = jwtService.isTokenValid(token,userDetailsService.loadUserByUsername(username));
+        if(!isValidToken)
+        {
+            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid token.");
+        }
+        if(forumService.createForum(username, forumRequest) == null)
+        {
+            return ResponseEntity.status(HttpStatus.CONFLICT).body("Forum name already exists. Please choose another name.");
+        }
+        return ResponseEntity.ok("Forum successfully created.");
+    }
 }
Index: ../AwsServer/src/main/java/com/awsServer/security/forum/ForumRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.forum;public class ForumRequest {\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/forum/ForumRequest.java b/../AwsServer/src/main/java/com/awsServer/security/forum/ForumRequest.java
--- a/../AwsServer/src/main/java/com/awsServer/security/forum/ForumRequest.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/forum/ForumRequest.java	
@@ -1,2 +1,18 @@
-package com.awsServer.security.forum;public class ForumRequest {
+package com.awsServer.security.forum;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+@Data
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class ForumRequest {
+    private String name;
+    private String description;
+    private String category;
 }
Index: ../AwsServer/src/main/java/com/awsServer/security/config/JwtAuthenticationFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.config;\r\n\r\nimport jakarta.servlet.FilterChain;\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.lang.NonNull;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.filter.OncePerRequestFilter;\r\n\r\nimport java.io.IOException;\r\n@Component\r\n@RequiredArgsConstructor\r\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\r\n\r\n    private final JwtService jwtService;\r\n    private final UserDetailsService userDetailsService;\r\n\r\n    @Override\r\n    protected void doFilterInternal(\r\n            @NonNull HttpServletRequest request,\r\n            @NonNull HttpServletResponse response,\r\n            @NonNull FilterChain filterChain\r\n    ) throws ServletException, IOException {\r\nfinal String authHeader = request.getHeader(\"Authorization\");\r\nfinal String jwt;\r\nfinal String userName;\r\nif(authHeader==null|| !authHeader.startsWith(\"Bearer \")){\r\n    filterChain.doFilter(request, response);\r\n    return;\r\n}\r\njwt = authHeader.substring(7);\r\nuserName =jwtService.extractUsername(jwt); // todo extract user userName from JWT token;\r\nif (userName!=null  && SecurityContextHolder.getContext().getAuthentication()==null){\r\n    UserDetails userDetails = this.userDetailsService.loadUserByUsername(userName);\r\n    if (jwtService.isTokenValid(jwt, userDetails)){\r\n        UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\r\n        authToken.setDetails(\r\n                new WebAuthenticationDetailsSource().buildDetails(request)\r\n        );\r\n        SecurityContextHolder.getContext().setAuthentication(authToken);\r\n    }\r\n}\r\nfilterChain.doFilter(request,response);\r\n    }\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/config/JwtAuthenticationFilter.java b/../AwsServer/src/main/java/com/awsServer/security/config/JwtAuthenticationFilter.java
--- a/../AwsServer/src/main/java/com/awsServer/security/config/JwtAuthenticationFilter.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/config/JwtAuthenticationFilter.java	
@@ -1,5 +1,6 @@
 package com.awsServer.security.config;
 
+import com.awsServer.security.services.JwtService;
 import jakarta.servlet.FilterChain;
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
@@ -10,7 +11,6 @@
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UserDetailsService;
-import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
 import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
 import org.springframework.stereotype.Component;
 import org.springframework.web.filter.OncePerRequestFilter;
@@ -29,20 +29,20 @@
             @NonNull HttpServletResponse response,
             @NonNull FilterChain filterChain
     ) throws ServletException, IOException {
-final String authHeader = request.getHeader("Authorization");
-final String jwt;
-final String userName;
-if(authHeader==null|| !authHeader.startsWith("Bearer ")){
+    final String authHeader = request.getHeader("Authorization");
+    final String jwt;
+    final String userName;
+    if(authHeader==null|| !authHeader.startsWith("Bearer ")){
     filterChain.doFilter(request, response);
     return;
-}
-jwt = authHeader.substring(7);
-userName =jwtService.extractUsername(jwt); // todo extract user userName from JWT token;
-if (userName!=null  && SecurityContextHolder.getContext().getAuthentication()==null){
-    UserDetails userDetails = this.userDetailsService.loadUserByUsername(userName);
-    if (jwtService.isTokenValid(jwt, userDetails)){
-        UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
-        authToken.setDetails(
+    }
+    jwt = authHeader.substring(7);
+    userName =jwtService.extractUsername(jwt);
+        if (userName!=null  && SecurityContextHolder.getContext().getAuthentication()==null){
+            UserDetails userDetails = this.userDetailsService.loadUserByUsername(userName);
+        if (jwtService.isTokenValid(jwt, userDetails)){
+            UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
+            authToken.setDetails(
                 new WebAuthenticationDetailsSource().buildDetails(request)
         );
         SecurityContextHolder.getContext().setAuthentication(authToken);
Index: ../AwsServer/src/main/java/com/awsServer/security/forum/Forum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.awsServer.security.forum;public class Forum {\r\n}\r\n
===================================================================
diff --git a/../AwsServer/src/main/java/com/awsServer/security/forum/Forum.java b/../AwsServer/src/main/java/com/awsServer/security/forum/Forum.java
--- a/../AwsServer/src/main/java/com/awsServer/security/forum/Forum.java	
+++ b/../AwsServer/src/main/java/com/awsServer/security/forum/Forum.java	
@@ -1,2 +1,35 @@
-package com.awsServer.security.forum;public class Forum {
+package com.awsServer.security.forum;
+
+import com.awsServer.security.post.Post;
+import com.awsServer.security.user.User;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+import java.util.List;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "_forum")
+public class Forum {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Integer id;
+    private String name;
+    private String description;
+    private Date creationDate;
+    private String category;
+
+    @OneToMany(mappedBy = "forum")
+    private List<Post> posts;
+
+    @OneToOne
+    @JoinColumn(name = "created_by")
+    private User user;
 }
